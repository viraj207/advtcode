def count_x_mas_pattern(word_search):
    """
    Count the occurrences of the X-MAS pattern in a word search grid.

    The X-MAS pattern is defined as two occurrences of "MAS" forming an X shape.

    Args:
        word_search (list of str): The word search grid, where each string represents a row.

    Returns:
        int: The total number of occurrences of the X-MAS pattern.
    """
    rows, cols = len(word_search), len(word_search[0])

    def is_in_bounds(x, y):
        return 0 <= x < rows and 0 <= y < cols

    def check_x_mas(x, y):
        # Check for the X-MAS pattern centered at (x, y):
        # M.S
        # .A.
        # M.S
        pattern_offsets = [
            (-1, -1), (-1, 1),  # M and S in the first row
            (0, 0),             # A in the middle
            (1, -1), (1, 1)     # M and S in the third row
        ]
        pattern_chars = ['M', 'S', 'A', 'M', 'S']

        for (dx, dy), char in zip(pattern_offsets, pattern_chars):
            nx, ny = x + dx, y + dy
            if not is_in_bounds(nx, ny) or word_search[nx][ny] != char:
                return 0
        return 1

    count = 0
    for x in range(1, rows - 1):
        for y in range(1, cols - 1):
            count += check_x_mas(x, y)

    return count

# Example word search
grid = [
    "M.S.......",
    ".A........",
    "M.S.......",
    ".....M.S..",
    "......A...",
    ".....M.S..",
    "........M.S",
    "........A..",
    "........M.S"
]

# Count the X-MAS patterns
occurrences = count_x_mas_pattern(grid)
print(f"The X-MAS pattern appears {occurrences} times in the word search.")

# If reading from a file, use the following code:
# with open("word_search.txt") as f:
#     grid = f.read().strip().split("\n")
# occurrences = count_x_mas_pattern(grid)
# print(f"The X-MAS pattern appears {occurrences} times in the word search.")
